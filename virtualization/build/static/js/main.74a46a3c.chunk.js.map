{"version":3,"sources":["App.js","serviceWorker.js","index.js","logo.svg"],"names":["rowCount","App","renderRow","index","key","style","onClick","setState","name","list","city","className","src","image","alt","text","state","Array","fill","map","val","idx","id","faker","address","findName","loremIpsum","count","units","sentenceLowerBound","sentenceUpperBound","width","height","rowHeight","rowRenderer","length","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"iQAOMA,EAAS,IAyEAC,E,YAtEf,aAAc,IAAD,8BACX,+CAsBFC,UAAU,YAA2B,IAAxBC,EAAuB,EAAvBA,MAAOC,EAAgB,EAAhBA,IAAKC,EAAW,EAAXA,MAEvB,OACE,yBAAKC,QAAS,WAAK,EAAKC,SAAS,CAACC,KAAK,EAAKC,KAAKN,GAAOO,QAASN,IAAKA,EAAKC,MAAOA,EAAOM,UAAU,OACjG,yBAAKA,UAAU,SACb,yBAAKC,IAAK,EAAKH,KAAKN,GAAOU,MAAOC,IAAI,MAExC,yBAAKH,UAAU,WACb,6BAAM,EAAKF,KAAKN,GAAOO,MACvB,6BAAM,EAAKD,KAAKN,GAAOY,SA7B7B,EAAKC,MAAM,CACTR,KAAK,IAEP,EAAKC,KAAKQ,MAAMjB,GAAUkB,OAAOC,KAAI,SAACC,EAAIC,GAExC,MAAM,CACJC,GAAGD,EACHX,KAAKa,IAAMC,QAAQd,OACnBF,KAAKe,IAAMf,KAAKiB,WAChBZ,MAAM,gCACNE,KAAMW,qBAAW,CACfC,MAAO,EACPC,MAAO,YACPC,mBAAoB,EACpBC,mBAAmB,QAjBd,E,sEAwCF,IAAD,OAIN,OACA,yBAAKnB,UAAU,OACb,yBAAKA,UAAU,IACf,yDACA,8GAEA,yBAAKA,UAAU,kBAChB,yBAAKA,UAAU,QAEpB,kBAAC,IAAD,MACC,gBAAEoB,EAAF,EAAEA,MAAMC,EAAR,EAAQA,OAAR,OACK,kBAAC,IAAD,CAAMD,MAAOA,EAAOC,OAAQA,EAAQC,UAbtB,GAa4CC,YAAa,EAAKhC,UAAWF,SAAU,EAAKS,KAAK0B,aAK5G,yBAAKxB,UAAU,WAEb,wBAAIW,GAAG,QAAP,QAAoBc,KAAKpB,MAAMR,a,GA/DpB6B,IAAMC,WCGJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB,6EEnInBC,EAAOC,QAAU,IAA0B,kC","file":"static/js/main.74a46a3c.chunk.js","sourcesContent":["import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { loremIpsum } from \"lorem-ipsum\";\nimport { List,AutoSizer } from \"react-virtualized\";\nimport faker from 'faker/locale/en_US';\n\nconst rowCount=10000;\n\nclass App extends React.Component {\nconstructor(){\n  super();\n \n  this.state={\n    name:\"\"\n  }\n  this.list=Array(rowCount).fill().map((val,idx)=>{\n    \n    return{\n      id:idx,\n      city:faker.address.city(),\n      name:faker.name.findName(),\n      image:'http://via.placeholder.com/40',\n      text: loremIpsum({\n        count: 1,\n        units: 'sentences',\n        sentenceLowerBound: 4,\n        sentenceUpperBound:8\n      })\n    }\n  })\n}\n\nrenderRow=({ index, key, style })=> {\n\n  return (\n    <div onClick={()=>{this.setState({name:this.list[index].city})}} key={key} style={style} className=\"row\">\n      <div className=\"image\">\n        <img src={this.list[index].image} alt=\"\" />\n      </div>\n      <div className=\"content\">\n        <div>{this.list[index].city}</div>\n        <div>{this.list[index].text}</div>\n      </div>\n    </div>\n  );\n}\n\n\n\n  render(){\n    const rowWidth=800;\n    const rowHeight=50;\n    const listHeight=600;\n    return (\n    <div className=\"App\">\n      <div className=\"\">\n      <h1>Large Data Front End Demo</h1>\n      <p>Utilizes React List Virtualization to efficiently render 10,000 unit data set.</p>\n      </div>\n      <div className=\"grid-container\">\n     <div className=\"list\">\n\n<AutoSizer>\n{({width,height}) => (\n      <List width={width} height={height} rowHeight={rowHeight} rowRenderer={this.renderRow} rowCount={this.list.length}/>\n)}\n</AutoSizer>\n\n     </div>\n     <div className=\"details\">\n     \n       <h1 id=\"name\">City:{this.state.name}</h1>\n  \n     </div> \n     </div>\n    </div>\n  );\n}}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}