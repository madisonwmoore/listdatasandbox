{"version":3,"sources":["components/LineGraph/LineGraph.js","App.js","serviceWorker.js","index.js"],"names":["LineGraph","props","componentDidMount","margin","width","d3","style","slice","height","x","range","y","valueline","d","date","close","svg","append","attr","parseTime","then","data","error","console","log","forEach","index","domain","call","componentDidUpdate","prevProps","state","id","Component","rowCount","App","renderRow","key","onClick","setState","name","searchBar","city","profit","text","className","src","image","alt","sortBy","document","getElementById","value","list","filter","str","startsWith","Array","fill","map","val","idx","faker","address","finance","amount","findName","Math","floor","random","loremIpsum","count","units","sentenceLowerBound","sentenceUpperBound","onChange","placeholder","type","re","rowHeight","rowRenderer","length","this","React","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"+SAGqBA,G,mBACjB,WAAYC,GAAO,IAAD,8BACd,4CAAMA,KAOXC,kBAAkB,WAEjB,IAAIC,EAAe,GAAfA,EAA0B,GAA1BA,EAAsC,GAAtCA,EAAgD,GACpDC,EAAQC,IAAU,UAAUC,MAAM,SAASC,MAAM,GAAI,GAAKJ,EAAcA,EACxEK,EAAS,IAAML,EAAaA,EAE5BM,EAAIJ,MAAeK,MAAM,CAAC,EAAGN,IAC7BO,EAAIN,MAAiBK,MAAM,CAACF,EAAQ,IAGpCI,EAAYP,MACXI,GAAE,SAASI,GAAK,OAAOJ,EAAEI,EAAEC,SAC3BH,GAAE,SAACE,GAAO,OAAOF,EAAEE,EAAEE,UAClBC,EAAMX,IAAU,UAAUY,OAAO,OACpCC,KAAK,QAASd,EAAQD,EAAcA,GACpCe,KAAK,SAAUV,EAASL,EAAaA,GACvCc,OAAO,KACLC,KAAK,YACA,aAAef,EAAc,IAAMA,EAAa,KAG/CgB,EAAYd,IAAa,YAEhCA,IAAO,YAAYe,MAAK,SAACC,EAAKC,GAE1B,GADAC,QAAQC,IAAIH,EAAK,IACbC,EAAO,MAAMA,EAGjBD,EAAKI,SAAQ,SAACZ,EAAEa,GACZb,EAAEC,KAAOK,EAAUN,EAAEC,MACrBD,EAAEE,MAAQ,EAAKd,MAAMoB,KAAKK,GAC1BH,QAAQC,IAAIX,EAAEC,MACdS,QAAQC,IAAIE,GACZH,QAAQC,IAAIX,EAAEE,UAItBN,EAAEkB,OAAOtB,IAAUgB,GAAM,SAASR,GAAK,OAAOA,EAAEC,SAChDH,EAAEgB,OAAO,CAAC,EAAGtB,IAAOgB,GAAM,SAASR,GAAK,OAAOA,EAAEE,WAGjDC,EAAIC,OAAO,QACNI,KAAK,CAACA,IACNH,KAAK,QAAS,QACdA,KAAK,IAAKN,GAGfI,EAAIC,OAAO,KACNC,KAAK,YAAa,eAAiBV,EAAS,KAC5CoB,KAAKvB,IAAcI,IAGxBO,EAAIC,OAAO,KACNW,KAAKvB,IAAYM,QA7DJ,EAiEtBkB,mBAAmB,SAACC,GAChB,IAAI3B,EAAe,GAAfA,EAA0B,GAA1BA,EAAsC,GAAtCA,EAAgD,GACpDC,EAAQC,IAAU,UAAUC,MAAM,SAASC,MAAM,GAAI,GAAKJ,EAAcA,EACxEK,EAAS,IAAML,EAAaA,EACzBa,EAAKX,IAAU,OAGdI,EAAIJ,MAAeK,MAAM,CAAC,EAAGN,IAC7BO,EAAIN,MAAiBK,MAAM,CAACF,EAAQ,IAEpCI,EAAYP,MACfI,GAAE,SAASI,GAAK,OAAOJ,EAAEI,EAAEC,SAC3BH,GAAE,SAACE,GAAO,OAAOF,EAAEE,EAAEE,UAElBI,EAAYd,IAAa,YAE7BA,IAAO,YAAYe,MAAK,SAACC,EAAKC,GAE1B,GADAC,QAAQC,IAAIH,EAAK,IACbC,EAAO,MAAMA,EAGjBD,EAAKI,SAAQ,SAACZ,EAAEa,GACZb,EAAEC,KAAOK,EAAUN,EAAEC,MACrBD,EAAEE,MAAQ,EAAKd,MAAMoB,KAAKK,GAC1BH,QAAQC,IAAIX,EAAEC,MACdS,QAAQC,IAAIE,GACZH,QAAQC,IAAIX,EAAEE,UAKtBC,EAAIC,OAAO,QACVI,KAAK,CAACA,IACNH,KAAK,QAAS,QACdA,KAAK,IAAKN,OAjGX,EAAKmB,MAAM,CACPV,KAAK,IAHS,E,sEAyGd,OACI,yBAAKW,GAAG,c,GA3GmBC,cCIjCC,EAAS,IA0GAC,E,YAvGf,aAAc,IAAD,8BACX,+CA6BFjC,kBAAkB,aA9BL,EAkCbkC,UAAU,YAA2B,IAAxBV,EAAuB,EAAvBA,MAAOW,EAAgB,EAAhBA,IAAK/B,EAAW,EAAXA,MAEvB,OACE,yBAAKgC,QAAS,WAAK,EAAKC,SAAS,CAACC,KAAK,EAAKC,YAAYf,GAAOgB,KAAMrB,KAAK,EAAKoB,YAAYf,GAAOL,KAAKsB,OAAO,EAAKF,YAAYf,GAAOiB,OAAQC,KAAM,EAAKH,YAAYf,GAAOkB,QAASP,IAAKA,EAAK/B,MAAOA,EAAOuC,UAAU,OACrN,yBAAKA,UAAU,SACb,yBAAKC,IAAK,EAAKL,YAAYf,GAAOqB,MAAOC,IAAI,MAE/C,yBAAKH,UAAU,WACb,6BAAM,EAAKJ,YAAYf,GAAOgB,MAC9B,6BAAM,EAAKD,YAAYf,GAAOkB,SA3CzB,EAiDbH,UAAU,WAIR,OADF,EAAKF,SAAS,CAACU,OAAOC,SAASC,eAAe,UAAUC,QAC/C,EAAKC,KAAKC,QAAO,SAAAC,GAAG,OAAEA,EAAIb,KAAKc,WAAWN,SAASC,eAAe,UAAUC,WAlDnF,EAAKrB,MAAM,CACTS,KAAK,UACLG,OAAO,MACPC,KAAK,QACLS,KAAK,GACLJ,OAAO,GACP5B,KAAK,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,IAE1B,EAAKgC,KAAKI,MAAMvB,GAAUwB,OAAOC,KAAI,SAACC,EAAIC,GAExC,MAAM,CACJ7B,GAAG6B,EACHnB,KAAKoB,IAAMC,QAAQrB,OACnBC,OAAQmB,IAAME,QAAQC,SACtBzB,KAAKsB,IAAMtB,KAAK0B,WAChB7C,KAAM,IAAIoC,MAAM,IAAIC,OAAOC,KAAI,SAACC,EAAIC,GAAL,OAAeM,KAAKC,MAAoB,EAAdD,KAAKE,aAC9DtB,MAAM,gCACNH,KAAM0B,qBAAW,CACfC,MAAO,EACPC,MAAO,YACPC,mBAAoB,EACpBC,mBAAmB,QAxBd,E,sEAkEF,IAAD,OAIN,OACA,yBAAK7B,UAAU,OACb,yBAAKA,UAAU,IACf,yDACA,8GAEA,yBAAKA,UAAU,kBAChB,yBAAKA,UAAU,QACb,yBAAKA,UAAU,cACtB,2BAAO8B,SAAU,kBAAI,EAAKlC,aAAaT,GAAG,SAAS4C,YAAY,YAAWC,KAAK,UAC/E,kBAAC,IAAD,MACC,gBAAEzE,EAAF,EAAEA,MAAMI,EAAR,EAAQA,OAAR,OACK,kBAAC,IAAD,CAAMsE,GAAI,EAAK/C,MAAMkB,OAAQ7C,MAAOA,EAAOI,OAAQA,EAAQuE,UAd7C,GAcmEC,YAAa,EAAK5C,UAAWF,SAAU,EAAKmB,KAAK4B,aAKnI,yBAAKpC,UAAU,WAEb,wBAAIb,GAAG,QAAQkD,KAAKnD,MAAMS,MAC1B,6BACA,2BAAI0C,KAAKnD,MAAMa,MACf,6BACA,wBAAIZ,GAAG,UAAP,WAAyBkD,KAAKnD,MAAMY,QACpC,6BACC,kBAAC,EAAD,CAAWtB,KAAM6D,KAAKnD,MAAMV,c,GAhGlB8D,IAAMlD,WCGJmD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASxC,SAASC,eAAe,SD2H3C,kBAAmBwC,WACrBA,UAAUC,cAAcC,MAAMzE,MAAK,SAAA0E,GACjCA,EAAaC,iB","file":"static/js/main.7ae9b04a.chunk.js","sourcesContent":["import React,{Component} from \"react\";\r\nimport * as d3 from \"d3\";\r\nimport \"./style.css\";\r\nexport default class LineGraph extends Component{\r\n    constructor(props){\r\n        super(props);\r\n    this.state={\r\n        data:[]\r\n      }\r\n   \r\n    }\r\n\r\n   componentDidMount=()=>{\r\n      \r\n    let margin = {top: 20, right: 20, bottom: 30, left: 50},\r\n    width = d3.select(\"#graph\").style(\"width\").slice(0, -2) - margin.left - margin.right,\r\n    height = 500 - margin.top - margin.bottom;\r\n// set the ranges\r\nlet x = d3.scaleTime().range([0, width]);\r\nvar y = d3.scaleLinear().range([height, 0]);\r\n\r\n// define the line\r\nlet valueline = d3.line()\r\n    .x(function(d) { return x(d.date); })\r\n    .y((d)=> { return y(d.close); });\r\n    let svg = d3.select(\"#graph\").append(\"svg\")\r\n    .attr(\"width\", width + margin.left + margin.right)\r\n    .attr(\"height\", height + margin.top + margin.bottom)\r\n  .append(\"g\")\r\n    .attr(\"transform\",\r\n          \"translate(\" + margin.left + \",\" + margin.top + \")\");\r\n\r\n\r\n       let parseTime = d3.timeParse(\"%d-%b-%y\");\r\n\r\n    d3.csv(\"data.csv\").then((data,error)=>{\r\n        console.log(data[0])\r\n        if (error) throw error;\r\n      \r\n        // format the data\r\n        data.forEach((d,index)=> {\r\n            d.date = parseTime(d.date);\r\n            d.close = this.props.data[index];\r\n            console.log(d.date);\r\n            console.log(index);\r\n            console.log(d.close);\r\n        });\r\n  \r\n\r\n    x.domain(d3.extent(data, function(d) { return d.date; }));\r\n    y.domain([0, d3.max(data, function(d) { return d.close; })]);\r\n  \r\n    // Add the valueline path.\r\n    svg.append(\"path\")\r\n        .data([data])\r\n        .attr(\"class\", \"line\")\r\n        .attr(\"d\", valueline);\r\n  \r\n    // Add the X Axis\r\n    svg.append(\"g\")\r\n        .attr(\"transform\", \"translate(0,\" + height + \")\")\r\n        .call(d3.axisBottom(x));\r\n  \r\n    // Add the Y Axis\r\n    svg.append(\"g\")\r\n        .call(d3.axisLeft(y));\r\n  });\r\n}\r\n   \r\ncomponentDidUpdate=(prevProps)=>{\r\n    let margin = {top: 20, right: 20, bottom: 30, left: 50},\r\n    width = d3.select(\"#graph\").style(\"width\").slice(0, -2) - margin.left - margin.right,\r\n    height = 500 - margin.top - margin.bottom;\r\n   let svg= d3.select(\"svg\");\r\n    \r\n\r\n    let x = d3.scaleTime().range([0, width]);\r\n    var y = d3.scaleLinear().range([height, 0]);\r\n\r\n    let valueline = d3.line()\r\n    .x(function(d) { return x(d.date); })\r\n    .y((d)=> { return y(d.close); });\r\n\r\n    let parseTime = d3.timeParse(\"%d-%b-%y\");\r\n\r\n    d3.csv(\"data.csv\").then((data,error)=>{\r\n        console.log(data[0])\r\n        if (error) throw error;\r\n      \r\n        // format the data\r\n        data.forEach((d,index)=> {\r\n            d.date = parseTime(d.date);\r\n            d.close = this.props.data[index];\r\n            console.log(d.date);\r\n            console.log(index);\r\n            console.log(d.close);\r\n        });\r\n\r\n   \r\n\r\n    svg.append(\"path\")\r\n    .data([data])\r\n    .attr(\"class\", \"line\")\r\n    .attr(\"d\", valueline);})\r\n   \r\n}\r\n\r\n   \r\n    render(){\r\n        return(\r\n            <div id=\"graph\">\r\n            </div>\r\n        )\r\n        }\r\n}\r\n\r\n","import React from 'react';\nimport './App.css';\nimport { loremIpsum } from \"lorem-ipsum\";\nimport { List,AutoSizer } from \"react-virtualized\";\nimport faker from 'faker/locale/en_US';\nimport {LineGraph} from \"./components/LineGraph\"\n\nconst rowCount=10000;\n\nclass App extends React.Component {\nconstructor(){\n  super();\n \n  this.state={\n    name:\"       \",\n    profit:\"   \",\n    text:\"     \",\n    list:\"\",\n    sortBy:\"\",\n    data:[0,1,2,3,4,5,6,7,8,9]\n  }\n  this.list=Array(rowCount).fill().map((val,idx)=>{\n    \n    return{\n      id:idx,\n      city:faker.address.city(),\n      profit: faker.finance.amount(),\n      name:faker.name.findName(),\n      data: new Array(10).fill().map((val,idx)=>val=Math.floor(Math.random()*5)),\n      image:'http://via.placeholder.com/40',\n      text: loremIpsum({\n        count: 1,\n        units: 'sentences',\n        sentenceLowerBound: 4,\n        sentenceUpperBound:8\n      })\n    }\n  })\n}\n\ncomponentDidMount=()=>{\n  \n}\n\nrenderRow=({ index, key, style })=> {\n\n  return (\n    <div onClick={()=>{this.setState({name:this.searchBar()[index].city, data:this.searchBar()[index].data,profit:this.searchBar()[index].profit, text: this.searchBar()[index].text})}} key={key} style={style} className=\"row\">\n      <div className=\"image\">\n        <img src={this.searchBar()[index].image} alt=\"\" />\n      </div>\n      <div className=\"content\">\n        <div>{this.searchBar()[index].city}</div>\n        <div>{this.searchBar()[index].text}</div>\n      </div>\n    </div>\n  );\n}\n\nsearchBar=()=>{\n\n// this.list=array;\nthis.setState({sortBy:document.getElementById(\"search\").value});\n  return this.list.filter(str=>str.city.startsWith(document.getElementById(\"search\").value));;\n}\n\n// bindListRef = ref => {\n//   this.list = ref;\n// };\n\n// componentDidUpdate() {\n//   if (this.list) {\n//     this.list.forceUpdate();\n//   }\n// }\n\n  render(){\n    const rowWidth=800;\n    const rowHeight=50;\n    const listHeight=600;\n    return (\n    <div className=\"App\">\n      <div className=\"\">\n      <h1>Large Data Front End Demo</h1>\n      <p>Utilizes React List Virtualization to efficiently render 10,000 unit data set.</p>\n      </div>\n      <div className=\"grid-container\">\n     <div className=\"list\">\n       <div className=\"search-box\">\n<input onChange={()=>this.searchBar()} id=\"search\" placeholder=\"Search...\"type=\"text\"/></div>\n<AutoSizer>\n{({width,height}) => (\n      <List re={this.state.sortBy} width={width} height={height} rowHeight={rowHeight} rowRenderer={this.renderRow} rowCount={this.list.length}/>\n)}\n</AutoSizer>\n\n     </div>\n     <div className=\"details\">\n     \n       <h2 id=\"name\">{this.state.name}</h2>\n       <br/>\n       <p>{this.state.text}</p>\n       <br/>\n       <h2 id=\"profit\">Profit:${this.state.profit}</h2>\n       <br/>\n        <LineGraph data={this.state.data}/>\n     </div> \n    \n     </div>\n    </div>\n  );\n}}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}